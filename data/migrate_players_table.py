#!/usr/bin/env python3
"""
Migraci√≥n de Base de Datos: A√±adir columnas is_professional y wyscout_id
Script para migrar la tabla players a√±adiendo las nuevas columnas preservando todos los datos.
"""

import logging
import sys
from datetime import datetime
from pathlib import Path
from typing import List, Tuple

from sqlalchemy import text

# A√±adir el directorio ra√≠z al path para importar m√≥dulos
sys.path.append(str(Path(__file__).parent.parent))

from controllers.db import get_db_session
from models import Player, User

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[logging.FileHandler("data/migration.log"), logging.StreamHandler()],
)
logger = logging.getLogger(__name__)


class PlayerTableMigration:
    """
    Maneja la migraci√≥n de la tabla players para a√±adir nuevas columnas.
    """

    def __init__(self):
        self.backup_table_name = (
            f"players_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        )
        self.migration_successful = False

    def check_current_schema(self) -> Tuple[bool, List[str]]:
        """
        Verifica el esquema actual de la tabla players.

        Returns:
            Tuple[needs_migration, current_columns]
        """
        logger.info("üîç Verificando esquema actual de la tabla players...")

        try:
            with get_db_session() as session:
                # Obtener informaci√≥n de columnas
                result = session.execute(text("PRAGMA table_info(players)")).fetchall()
                columns = [row[1] for row in result]

                logger.info(f"üìã Columnas actuales: {columns}")

                # Verificar si las nuevas columnas ya existen
                new_columns = ["is_professional", "wyscout_id"]
                missing_columns = [col for col in new_columns if col not in columns]

                if missing_columns:
                    logger.info(f"‚ö†Ô∏è  Columnas faltantes: {missing_columns}")
                    return True, columns
                else:
                    logger.info("‚úÖ Todas las columnas ya est√°n presentes")
                    return False, columns

        except Exception as e:
            logger.error(f"‚ùå Error verificando esquema: {str(e)}")
            raise

    def count_existing_players(self) -> int:
        """
        Cuenta el n√∫mero de jugadores existentes.

        Returns:
            N√∫mero de jugadores
        """
        try:
            with get_db_session() as session:
                # Usar query SQL directa para evitar errores de ORM
                result = session.execute(
                    text("SELECT COUNT(*) FROM players")
                ).fetchone()
                count = result[0] if result else 0
                logger.info(f"üë• Jugadores existentes: {count}")
                return count

        except Exception as e:
            logger.error(f"‚ùå Error contando jugadores: {str(e)}")
            raise

    def create_backup(self) -> bool:
        """
        Crea una copia de seguridad de la tabla players actual.

        Returns:
            True si el backup fue exitoso
        """
        logger.info(
            f"üíæ Creando backup de tabla players como {self.backup_table_name}..."
        )

        try:
            with get_db_session() as session:
                # Crear tabla de backup
                backup_sql = f"""
                CREATE TABLE {self.backup_table_name} AS
                SELECT * FROM players
                """
                session.execute(text(backup_sql))
                session.commit()

                # Verificar que el backup se cre√≥ correctamente
                result = session.execute(
                    text(f"SELECT COUNT(*) FROM {self.backup_table_name}")
                ).fetchone()
                backup_count = result[0] if result else 0

                logger.info(f"‚úÖ Backup creado exitosamente: {backup_count} registros")
                return True

        except Exception as e:
            logger.error(f"‚ùå Error creando backup: {str(e)}")
            return False

    def create_new_players_table(self) -> bool:
        """
        Crea la nueva tabla players con las columnas adicionales.

        Returns:
            True si la tabla se cre√≥ exitosamente
        """
        logger.info("üîß Creando nueva tabla players con columnas adicionales...")

        try:
            with get_db_session() as session:
                # Crear nueva tabla con estructura completa
                create_table_sql = """
                CREATE TABLE players_new (
                    player_id INTEGER PRIMARY KEY,
                    user_id INTEGER NOT NULL UNIQUE,
                    service TEXT,
                    enrolment INTEGER DEFAULT 0,
                    notes TEXT,
                    is_professional INTEGER DEFAULT 0,
                    wyscout_id TEXT UNIQUE,
                    FOREIGN KEY(user_id) REFERENCES users(user_id)
                )
                """
                session.execute(text(create_table_sql))
                session.commit()

                logger.info("‚úÖ Nueva tabla players_new creada exitosamente")
                return True

        except Exception as e:
            logger.error(f"‚ùå Error creando nueva tabla: {str(e)}")
            return False

    def migrate_data(self) -> bool:
        """
        Migra los datos de la tabla original a la nueva tabla.

        Returns:
            True si la migraci√≥n fue exitosa
        """
        logger.info("üì¶ Migrando datos de la tabla original...")

        try:
            with get_db_session() as session:
                # Migrar datos con valores por defecto para nuevas columnas
                migrate_sql = """
                INSERT INTO players_new (
                    player_id, user_id, service, enrolment, notes,
                    is_professional, wyscout_id
                )
                SELECT
                    player_id, user_id, service, enrolment, notes,
                    0 as is_professional,  -- False por defecto
                    NULL as wyscout_id     -- NULL por defecto
                FROM players
                """
                session.execute(text(migrate_sql))
                session.commit()

                # Verificar que se migraron todos los datos
                original_count = session.execute(
                    text("SELECT COUNT(*) FROM players")
                ).fetchone()[0]
                new_count = session.execute(
                    text("SELECT COUNT(*) FROM players_new")
                ).fetchone()[0]

                if original_count == new_count:
                    logger.info(f"‚úÖ Migraci√≥n exitosa: {new_count} registros migrados")
                    return True
                else:
                    logger.error(
                        f"‚ùå Error en migraci√≥n: {original_count} original vs {new_count} migrados"
                    )
                    return False

        except Exception as e:
            logger.error(f"‚ùå Error migrando datos: {str(e)}")
            return False

    def replace_tables(self) -> bool:
        """
        Reemplaza la tabla original con la nueva tabla.

        Returns:
            True si el reemplazo fue exitoso
        """
        logger.info("üîÑ Reemplazando tabla original con la nueva tabla...")

        try:
            with get_db_session() as session:
                # Renombrar tabla original
                session.execute(
                    text(f"ALTER TABLE players RENAME TO {self.backup_table_name}_old")
                )

                # Renombrar nueva tabla
                session.execute(text("ALTER TABLE players_new RENAME TO players"))

                session.commit()

                logger.info("‚úÖ Tablas reemplazadas exitosamente")
                return True

        except Exception as e:
            logger.error(f"‚ùå Error reemplazando tablas: {str(e)}")
            return False

    def verify_migration(self) -> bool:
        """
        Verifica que la migraci√≥n fue exitosa.

        Returns:
            True si la verificaci√≥n fue exitosa
        """
        logger.info("üîç Verificando integridad de la migraci√≥n...")

        try:
            with get_db_session() as session:
                # Verificar estructura de la nueva tabla
                result = session.execute(text("PRAGMA table_info(players)")).fetchall()
                columns = [row[1] for row in result]

                required_columns = [
                    "player_id",
                    "user_id",
                    "service",
                    "enrolment",
                    "notes",
                    "is_professional",
                    "wyscout_id",
                ]

                missing_columns = [
                    col for col in required_columns if col not in columns
                ]

                if missing_columns:
                    logger.error(
                        f"‚ùå Columnas faltantes despu√©s de migraci√≥n: {missing_columns}"
                    )
                    return False

                # Verificar datos
                count_result = session.execute(
                    text("SELECT COUNT(*) FROM players")
                ).fetchone()
                total_players = count_result[0] if count_result else 0

                # Verificar valores por defecto
                professional_result = session.execute(
                    text("SELECT COUNT(*) FROM players WHERE is_professional = 1")
                ).fetchone()
                professional_count = (
                    professional_result[0] if professional_result else 0
                )

                wyscout_result = session.execute(
                    text("SELECT COUNT(*) FROM players WHERE wyscout_id IS NOT NULL")
                ).fetchone()
                wyscout_count = wyscout_result[0] if wyscout_result else 0

                logger.info(f"üìä Verificaci√≥n completada:")
                logger.info(f"   üë• Total jugadores: {total_players}")
                logger.info(f"   üèÜ Jugadores profesionales: {professional_count}")
                logger.info(f"   üÜî Con WyscoutID: {wyscout_count}")
                logger.info(f"   üìã Columnas: {columns}")

                return True

        except Exception as e:
            logger.error(f"‚ùå Error en verificaci√≥n: {str(e)}")
            return False

    def cleanup_backup_tables(self) -> bool:
        """
        Limpia tablas de backup temporales manteniendo el backup principal.

        Returns:
            True si la limpieza fue exitosa
        """
        logger.info("üßπ Limpiando tablas temporales...")

        try:
            with get_db_session() as session:
                # Eliminar tabla temporal si existe
                backup_old_name = f"{self.backup_table_name}_old"

                # Verificar si existe antes de eliminar
                check_result = session.execute(
                    text(
                        f"SELECT name FROM sqlite_master WHERE type='table' AND name='{backup_old_name}'"
                    )
                ).fetchone()

                if check_result:
                    session.execute(text(f"DROP TABLE {backup_old_name}"))
                    session.commit()
                    logger.info(f"üóëÔ∏è  Tabla temporal {backup_old_name} eliminada")

                logger.info(f"üíæ Backup principal mantenido: {self.backup_table_name}")
                return True

        except Exception as e:
            logger.error(f"‚ùå Error en limpieza: {str(e)}")
            return False

    def run_migration(self) -> bool:
        """
        Ejecuta el proceso completo de migraci√≥n.

        Returns:
            True si la migraci√≥n fue exitosa
        """
        logger.info("üöÄ Iniciando migraci√≥n de tabla players...")

        try:
            # 1. Verificar si necesita migraci√≥n
            needs_migration, current_columns = self.check_current_schema()
            if not needs_migration:
                logger.info(
                    "‚úÖ La tabla ya tiene las columnas necesarias. No se requiere migraci√≥n."
                )
                return True

            # 2. Contar jugadores existentes
            original_count = self.count_existing_players()
            if original_count == 0:
                logger.warning(
                    "‚ö†Ô∏è  No hay jugadores existentes. Creando tabla con nueva estructura..."
                )
                # Solo crear la estructura sin migrar datos
                with get_db_session() as session:
                    session.execute(text("DROP TABLE IF EXISTS players"))
                    session.commit()
                from models import Base

                with get_db_session() as session:
                    Base.metadata.create_all(session.bind)
                logger.info("‚úÖ Tabla creada con nueva estructura")
                return True

            # 3. Crear backup
            if not self.create_backup():
                logger.error("‚ùå No se pudo crear backup. Abortando migraci√≥n.")
                return False

            # 4. Crear nueva tabla
            if not self.create_new_players_table():
                logger.error("‚ùå No se pudo crear nueva tabla. Abortando migraci√≥n.")
                return False

            # 5. Migrar datos
            if not self.migrate_data():
                logger.error("‚ùå No se pudieron migrar datos. Abortando migraci√≥n.")
                return False

            # 6. Reemplazar tablas
            if not self.replace_tables():
                logger.error(
                    "‚ùå No se pudieron reemplazar tablas. Abortando migraci√≥n."
                )
                return False

            # 7. Verificar migraci√≥n
            if not self.verify_migration():
                logger.error("‚ùå La verificaci√≥n de migraci√≥n fall√≥.")
                return False

            # 8. Limpiar tablas temporales
            self.cleanup_backup_tables()

            self.migration_successful = True
            logger.info("üéâ ¬°Migraci√≥n completada exitosamente!")
            logger.info(f"üíæ Backup disponible en tabla: {self.backup_table_name}")

            return True

        except Exception as e:
            logger.error(f"‚ùå Error cr√≠tico en migraci√≥n: {str(e)}")
            return False


def main():
    """Funci√≥n principal para ejecutar la migraci√≥n."""
    print("üîß Migraci√≥n de Tabla Players - Sistema de Estad√≠sticas Profesionales")
    print("=" * 70)

    migration = PlayerTableMigration()

    try:
        success = migration.run_migration()

        if success:
            print("\n‚úÖ MIGRACI√ìN EXITOSA")
            print("La aplicaci√≥n ahora puede usar las nuevas columnas:")
            print("  - is_professional: Para marcar jugadores profesionales")
            print("  - wyscout_id: Para linking con datos de liga tailandesa")
            print("\nüí° Pr√≥ximos pasos:")
            print("  1. Reiniciar la aplicaci√≥n")
            print("  2. Probar que todos los perfiles funcionan")
            print("  3. Marcar jugadores como profesionales seg√∫n sea necesario")
        else:
            print("\n‚ùå MIGRACI√ìN FALLIDA")
            print("Revisa los logs para m√°s detalles.")
            return 1

    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  Migraci√≥n interrumpida por el usuario")
        return 1
    except Exception as e:
        print(f"\n‚ùå Error inesperado: {str(e)}")
        return 1

    return 0


if __name__ == "__main__":
    exit(main())
