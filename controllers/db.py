# controllers/db.py
import os
from typing import Optional

from sqlalchemy import create_engine
from sqlalchemy.orm import Session as SQLAlchemySession
from sqlalchemy.orm import sessionmaker

from models import Base

# Variables globales para reutilizar engine y Session
_engine = None
_Session: Optional[sessionmaker] = None

# Connection pooling configuration optimizado para Supabase
POOL_SIZE = int(os.getenv("DB_POOL_SIZE", "2"))  # Muy conservador para Supabase
MAX_OVERFLOW = int(os.getenv("DB_MAX_OVERFLOW", "1"))  # Total m√°ximo: 3 conexiones
POOL_TIMEOUT = int(os.getenv("DB_POOL_TIMEOUT", "10"))  # Timeout m√°s agresivo
POOL_RECYCLE = int(os.getenv("DB_POOL_RECYCLE", "900"))  # 15 minutos (m√°s agresivo)


def initialize_database() -> bool:
    """
    Inicializa la base de datos PostgreSQL de Supabase.
    Configuraci√≥n simplificada solo para producci√≥n.

    Returns:
        bool: True si la inicializaci√≥n fue exitosa, False en caso contrario
    """
    global _engine, _Session

    try:
        if _engine is None:
            # Obtener URL de Supabase directamente
            supabase_db_url = os.getenv("SUPABASE_DATABASE_URL")

            if not supabase_db_url:
                print("‚ùå SUPABASE_DATABASE_URL no est√° configurada")
                return False

            print(f"üîß Conectando a Supabase PostgreSQL...")
            print(f"   URL: {supabase_db_url.split('@')[0]}...")

            # Configurar engine con connection pooling ultra-conservador para Supabase
            _engine = create_engine(
                supabase_db_url,
                pool_size=POOL_SIZE,  # Conexiones persistentes en el pool
                max_overflow=MAX_OVERFLOW,  # Conexiones adicionales si es necesario
                pool_timeout=POOL_TIMEOUT,  # Timeout agresivo para liberaci√≥n r√°pida
                pool_recycle=POOL_RECYCLE,  # Reciclar cada 15 min (evita conexiones idle)
                pool_pre_ping=True,  # Verificar conexiones antes de usar
                pool_reset_on_return="rollback",  # Limpiar transacciones al devolver
                echo=False,  # No logging SQL (performance)
                # Configuraciones adicionales para Supabase
                connect_args={
                    "options": "-c default_transaction_isolation=read_committed"
                },
            )

            print(f"üèä Connection pool configurado (ultra-conservador para Supabase):")
            print(f"   - Pool size: {POOL_SIZE}")
            print(f"   - Max overflow: {MAX_OVERFLOW}")
            print(f"   - Pool timeout: {POOL_TIMEOUT}s")
            print(f"   - Pool recycle: {POOL_RECYCLE//60}m")
            print(f"   - Pool reset: rollback")
            print(f"   - Max conexiones total: {POOL_SIZE + MAX_OVERFLOW}")
            print("   ‚ö†Ô∏è Configuraci√≥n ultra-conservadora para evitar l√≠mites Supabase")

            # Para PostgreSQL de Supabase, las tablas ya existen
            print("‚úÖ Conectado a base de datos PostgreSQL de Supabase")

            _Session = sessionmaker(bind=_engine)
            print("‚úÖ Base de datos inicializada correctamente")
            return True

    except Exception as e:
        print(f"‚ùå Error conectando a Supabase: {e}")
        _engine = None
        _Session = None
        return False

    return True


def get_db_session() -> SQLAlchemySession:
    """
    Devuelve una sesi√≥n SQLAlchemy lista para usar.

    Returns:
        SQLAlchemySession: Sesi√≥n de base de datos

    Raises:
        RuntimeError: Si no se puede inicializar la base de datos
    """
    global _Session

    # Asegurar que la base de datos est√© inicializada
    if _Session is None:
        if not initialize_database():
            raise RuntimeError(
                "No se pudo inicializar la base de datos. "
                "Verifica que el archivo de configuraci√≥n y los permisos sean correctos."
            )

    # Para satisfacer a Pylance
    if _Session is None:
        raise RuntimeError(
            "Error cr√≠tico: _Session sigue siendo None despu√©s de la inicializaci√≥n"
        )

    return _Session()


def force_cleanup_connections():
    """Fuerza limpieza de conexiones idle y hu√©rfanas."""
    global _engine

    if _engine is not None:
        try:
            # Informaci√≥n del pool antes de limpieza
            print(f"üßπ Limpieza forzada de conexiones:")
            print(f"   - Conexiones activas: {_engine.pool.checkedout()}")
            print(f"   - Conexiones en pool: {_engine.pool.checkedin()}")
            print(f"   - Conexiones inv√°lidas: {_engine.pool.invalid()}")

            # Invalidar todas las conexiones del pool
            _engine.pool.invalidate()

            print("‚úÖ Conexiones idle limpiadas")
        except Exception as e:
            print(f"‚ö†Ô∏è Error durante limpieza: {e}")


def close_all_connections():
    """Cierra todas las conexiones del pool y limpia los recursos globales."""
    global _engine, _Session

    if _engine is not None:
        print(f"üîí Cerrando connection pool...")
        print(f"   - Conexiones activas: {_engine.pool.checkedout()}")
        print(f"   - Conexiones en pool: {_engine.pool.checkedin()}")

        _engine.dispose()  # Cierra todas las conexiones del pool
        _engine = None

    _Session = None
    print("‚úÖ Connection pool cerrado correctamente")


def get_database_info() -> dict:
    """
    Devuelve informaci√≥n sobre el estado de la base de datos incluyendo pool info.

    Returns:
        dict: Informaci√≥n sobre la base de datos
    """
    base_info = {
        "database_type": "PostgreSQL (Supabase)",
        "is_initialized": _Session is not None,
        "engine_active": _engine is not None,
    }

    # Informaci√≥n del connection pool si est√° disponible
    if _engine is not None:
        pool = _engine.pool
        base_info.update(
            {
                "pool_size": pool.size(),
                "pool_checked_in": pool.checkedin(),
                "pool_checked_out": pool.checkedout(),
                "pool_overflow": pool.overflow(),
                "pool_invalid": pool.invalid(),
            }
        )

    return base_info
